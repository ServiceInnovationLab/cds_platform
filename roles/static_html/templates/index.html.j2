<!DOCTYPE html>
<html>
<head>
    <title>Delegation Links | {{ env }}</title>
    <link rel="stylesheet" href="//cdn.jsdelivr.net/pure/0.6.0/pure-min.css">
    <style>
      .pure-g {
        display: flex;
        flex-flow: row wrap;
      }

      #layout {
        padding-right: 270px;
      }

      #menu {
        top: 0;
        bottom: 0;
        left: 180px;
        margin-left: -180px;
        width: 180px;
        position: fixed;
        background: #191818;
      }

      #menu a {
        color: #999;
      }

      #menu .pure-menu-heading {
        color: #fff;
      }

      #menu .pure-menu-list {
        border-top: 1px solid #333;
        margin-bottom: 1em;
      }

      #main {
        padding-left: 180px;
        margin: 0 2em;
      }

      #content {
        max-width: 1024px;
        margin: 0 auto;
      }

      #status-report {
        right: 270px;
        margin-right: -270px;
        top: 0;
        bottom: 0;
        width: 270px;
        position: fixed;
        background-color: #ccc;
      }

      #header {
        max-width: 1024px;
        margin: 0 auto;
      }

      #content ul li {
        padding: 0;
        margin: 0;
      }

      #content ul li {
        list-style: none;
      }

      img.main-flow {
        margin-right: 270px;
      }

      h2 {
        margin-top: 0.2em;
        margin-bottom: 0.2em;
      }

      .status p, .status h2 {
        margin: 8px;
        padding: 8px;
        width: 230px;
      }

      .status p a {
        text-decoration: none;
        color: #000000;
      }

      .success {
        background: green;
      }

      .building {
        background: yellow;
      }

      .aborted {
        background: grey;
      }

      .error {
        background: #ff0000;
      }


    </style>
    <script src="//code.jquery.com/jquery-2.1.3.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/mithril/0.2.0/mithril.min.js"></script>
</head>

<div id="layout">

  <div id="main">

    <div class="header">
      <h1>MoE Delegation - {{ env }}</h1>
    </div>

    <div class="content">
        <p>Welcome, here are some links to help you enjoy your stay</p>

        <div id="links">
          <p><a href="https://{{ www_host }}/app/ui/dashboard/dashboard">Delegation Dashboard</a></p>
          <p><a href="https://{{ sso_host }}/sso">OpenAM Console</a></p>
          <p><a href="https://{{ test_host }}/test-harness/index">Test harness</a></p>

          <h2>Tools</h2>

          <p><a href="https://git.tools.delegation.org.nz/">Gitlab</a></p>
          <p><a href="https://tools.delegation.org.nz/jenkins/">Jenkins</a></p>
          <p><a href="https://tools.delegation.org.nz/archiva/">Archiva</a></p>
          <p><a href="https://tools.delegation.org.nz/squirrelmail/src/login.php">Squirrel Mail</a></p>
          <p><a href="https://tools.delegation.org.nz/sel-jenkins/">Selenity Jenkins</a></p>
          <p><a href="https://tools.delegation.org.nz/selenityui/">Selenity</a></p>

          <h2>Improved Demo Apps</h2>
          <dl>
            <dt>Immigration</dt>
            <dd><a href="https://{{ test_host }}/inz-improved">INZ</a></dd>
            <dt>Health</dt>
            <dd><a href="https://{{ test_host }}/health-improved">Health</a></dd>
            <dd><a href="https://{{ test_host }}/health-improved/gp/">Health - GP</a></dd>
            <dd><a href="https://{{ test_host }}/health-improved/monitor/">Health - Blood Sugar Monitoring</a></dd>
            <dt>Careers</dt>
            <dd><a href="https://{{ test_host }}/careers-improved">Careers</a></dd>
            <dd><a href="https://{{ test_host }}/nzqa">NZQA</a></dd>
            <dt>Parents</dt>
            <dd><a href="https://{{ test_host }}/parent-improved">Parent Portal</a></dd>
            <dd><a href="https://{{ test_host }}/parent-improved/admin/">Admin Portal</a></dd>
            <dt>RealMe</dt>
            <dd><a href="https://{{ test_host }}/realme">Attribute service</a></dd>
          </dl>

          <div id="raw-apps">
            <h2>Demo Apps</h2>
            <dl>
              <dt>Immigration</dt>
              <dd><a href="https://{{ test_host }}/inz">INZ</a></dd>
              <dt>Health</dt>
              <dd><a href="https://{{ test_host }}/health">Health</a></dd>
              <dd><a href="https://{{ test_host }}/health/gp/">Health - GP</a></dd>
              <dd><a href="https://{{ test_host }}/health/monitor/">Health - Blood Sugar Monitoring</a></dd>
              <dt>Careers</dt>
              <dd><a href="https://{{ test_host }}/careers">Careers</a></dd>
              <dd><a href="https://{{ test_host }}/nzqa">NZQA</a></dd>
              <dt>Parents</dt>
              <dd><a href="https://{{ test_host }}/parent">Parent Portal</a></dd>
              <dd><a href="https://{{ test_host }}/parent/admin/">Admin Portal</a></dd>
            </dl>
          </div>
        </div>
    </div>
  </div>

  <div id="status-report">
    <div class="status">
      <h2>Selenity Status</h2>

      <div id="results">
        Loading...
      </div>

    </div>

    <div class="status">
      <h2>Deploy Status</h2>

      <div id="deploy-results">
        Loading...
      </div>

    </div>

    <div class="status">
      <h2>Build Status</h2>

      <div id="build-results">
        Loading...
      </div>

    </div>

    <div class="status">
      <div id="ping"></div>
    </div>

  </div>

</div>

<script type="text/javascript">

model = {
    links: {
        squirrelMail:         { name: "Squirrel Mail",                   uri: "https://tools.delegation.org.nz/squirrelmail/src/login.php" },
        smsWatcher:           { name: "SMS Watcher",                     uri: "https://{{ test_host }}/sms/" },
        gitlab:               { name: "Gitlab",                          uri: "https://git.tools.delegation.org.nz/" },
        jenkins:              { name: "Jenkins",                         uri: "https://tools.delegation.org.nz/jenkins/" },
        archiva:              { name: "Archiva",                         uri: "https://tools.delegation.org.nz/archiva/" },
        selenityJenkins:      { name: "Selenity Jenkins",                uri: "https://tools.delegation.org.nz/sel-jenkins/" },
        openamConsole:        { name: "OpenAM Console",                  uri: "https://{{ sso_host }}/sso" },
        testHarness:          { name: "Test Harness",                    uri: "https://{{ test_host }}/test-harness/index" },
        selenity:             { name: "Selenity",                        uri: "https://tools.delegation.org.nz/selenityui/" },
        attributeService:     { name: "Attribute Service",               uri: "https://{{ test_host }}/realme" },
        delegationDashboard:  { name: "Delegation Dashboard",            uri: "https://{{ www_host }}/app/ui/dashboard/dashboard" },

        swagger:              { name: "Api Docs (Swagger)",              uri: "https://{{ test_host }}/swagger?url=https://{{ www_host }}/cds/api/swagger.json" },
        projectDocs:          { name: "Project Documentation",           uri: "https://tools.delegation.org.nz/docs/" },

        careers:              { name: "Careers",                         uri: "https://{{ test_host }}/careers-improved" },
        nzqa:                 { name: "NZQA",                            uri: "https://{{ test_host }}/nzqa" }
    }
};

viewmodel = {
    drawLink: function(linkKey){
        var link = model.links[linkKey];
        return m("li", m("a", {href: link.uri}, link.name));
    },
    drawRawLink: function(linkKey){
        var link = model.links[linkKey];
        return m("a", {href: link.uri}, link.name);
    }
};

view = {};

view.menuLink = {
    view: function(ctrl, linkKey) {
        var link = model.links[linkKey];
        return m("li.pure-menu-item", m("a.pure-menu-link", {href: link.uri}, link.name));
    }
};

view.menu = {
    view: function() {
        return m("div#menu",
                 m("div.pure-menu", [
                     m("span.pure-menu-heading", "Delegations PoC"),
                     m("ul.pure-menu-list", [
                         m("li.pure-menu-item", m("a.pure-menu-link[href='/home']", {config: m.route}, "Home")),
                         m("li.pure-menu-item", m("a.pure-menu-link[href='/all-links']", {config: m.route}, "All links"))
                     ]),
                     m("span.pure-menu-heading", "Demo Apps"),
                     m("ul.pure-menu-list", [
                         m("li.pure-menu-item", m("a.pure-menu-link[href='/careers']", {config: m.route}, "Careers")),
                     ]),
                     m("span.pure-menu-heading", "Docs"),
                     m("ul.pure-menu-list", [
                         m.component(view.menuLink, "projectDocs"),
                         m.component(view.menuLink, "swagger")
                     ]),
                     m("span.pure-menu-heading", "Tools"),
                     m("ul.pure-menu-list", [
                         m.component(view.menuLink, "squirrelMail"),
                         m.component(view.menuLink, "openamConsole"),
                         m.component(view.menuLink, "attributeService"),
                         m.component(view.menuLink, "testHarness"),
                         m.component(view.menuLink, "gitlab"),
                         m.component(view.menuLink, "jenkins"),
                         m.component(view.menuLink, "archiva"),
                         m.component(view.menuLink, "selenityJenkins"),
                         m.component(view.menuLink, "selenity")
                     ])
                 ]));
    }
};

view.page = function(header, content) {
    return [
        m.component(view.menu),
        m("div#header", header),
        m("div#content", content)
    ];
}

view.home = {
    view: function() {
        return view.page(m("h1", {style: "text-align: center;"}, "MoE Delegation - {{ env }}"), [
            m("p", "Welcome to Delegation demo environment"),
            m("p", "The demo environment contains four demo applications which are built specifically for four separate business cases. Each case has highlighted the use of different key features of UMA to resolve a business problem"),
            m("p", "Links provided in the menu bar will give you access to each demo application. Each page will have a brief description of the use case and links which you will need to create users before starting to use the application"),
            m("p", m("strong", "Please note that the RealMe logins you will be creating during the use of this demo application are created in the RealMe ITE environment and that they cannot be used in the RealMe production environment.")),
            m("p", "Also note that any accounts created in the demo applications will be removed overnight.")
        ]);
    }
};

view.allLinks = {
    view: function() {
        return view.page(m("h1", {style: "text-align: center;"}, "All Links"), [
            m("h2", "Demo Apps"),
            m("dl", [
                m("dt", "Careers"),
                m("dd", viewmodel.drawRawLink("careers")),
                m("dd", viewmodel.drawRawLink("nzqa")),
            ]),
        ]);
    }
};

view.demoApp = {
    controller: function(args) {
        var showList = m.prop(false);
        return {
            showList: showList,
            toggle: function(e) {
                e.preventDefault();
                showList(!showList());
            }
        };
    },
    view: function(ctrl, args){
        return m("div.pure-g", [
            m("div.pure-u-3-4", args.instructions),
            m("div.pure-u-1-4", [
                m("h4", "Demo App Links"),
                m("ul", args.links.map(viewmodel.drawLink)),
                m("ul", m("li", m("button.pure-button", {onclick: ctrl.toggle}, ctrl.showList() ? "Hide raw demo apps" : "Show raw demo apps"))),
                ctrl.showList() ? m("ul", args.oldLinks.map(viewmodel.drawLink)) : []
            ]),
            m("div.pure-u-1", m("img.main-flow", {src: args.image}))
        ]);
    }
};

view.careers = {
    view: function(){
        return view.page(
            m("div", {style: "padding: 0.5em; background: #cb1d1d url(bg-header-careers.png) no-repeat 100% 100%"},
              m("img[src='logo-careers.png']")),
            m.component(view.demoApp, {
                instructions: [
                    m("h4", "Welcome to the Careers Demo Portal"),
                    m("p", "Important information for Careers portal demo users:"),
                    m("ol", [
                        m("li", "Create a RealMe Attribute Service profile for 'Caleb' (Employer at Better Builders) using an existing RealMe ITE login or by creating a new login through the ", viewmodel.drawRawLink("attributeService"), "."),
                        m("li", "Create an ESIAM account for 'Alex' through ", viewmodel.drawRawLink("nzqa"), "."),
                        m("li", "Email notifications can be viewed through ", viewmodel.drawRawLink("squirrelMail"), ". The Username and Password for this service is 'trap'.")
                    ])
                ],
                image: "careers.png",
                links: [ "careers", "nzqa", "attributeService", "delegationDashboard", "squirrelMail" ],
                oldLinks: [ "oldCareers" ]
            }));
    }
};

m.route.mode = "search";
m.route(document.getElementById("main"), "/home", {
    "/home": view.home,
    "/all-links": view.allLinks,
    "/careers": view.careers,
});
</script>

<script type="text/javascript">
    $(document).ready(function () {

        function log(data) {
            window.console && console.log(data);
        }

        function Job(settings) {
            this.queueUrl = settings.baseUrl + "/queue/api/json";
            this.jobUrl = settings.baseUrl + "/job/" + settings.name;
            this.name = settings.name;
            this.credentials = settings.credentials;

            this.resultElement = $("<p><a target='_blank' href='" + this.jobUrl + "'></a></p>").appendTo(settings.resultContainer);
        }

        Job.prototype.status = function (doneCB) {
            log("Getting status: " + this.name);
            var resultElement = this.resultElement;
            var name = this.name;
            var url = this.jobUrl + "/lastBuild/api/json?tree=building,result,timestamp,estimatedDuration";
            $.getJSON(this.queueUrl, function (queue) {
                log(queue);
                if (queue.items.some(function (item) {
                            return item.task.name == name;
                        })) {
                    $("a", resultElement).text(name + ": QUEUED")
                    resultElement.removeClass()
                            .addClass("building");
                    doneCB();
                } else {
                    $.getJSON(url, function (data) {
                        log(data);
                        var result = data.building ? 'BUILDING' : data.result;
                        var resultClass = "";
                        var statusText = result;
                        switch (result) {
                            case "SUCCESS":
                                resultClass = "success";
                                break;
                            case "BUILDING":
                                resultClass = "building";
                                statusText = "~" + Math.round((Date.now() - data.timestamp) * 100 / data.estimatedDuration) + "%";
                                break;
                            case "ABORTED":
                                resultClass = "aborted";
                                break;
                            default:
                                resultClass = "error";
                                break;
                        }

                        $("a", resultElement).text(name + ": " + statusText);
                        resultElement.removeClass()
                                .addClass(resultClass);
                        doneCB();
                    });
                }
            });

        };

        function SelenityJob(name, resultContainer) {
            Job.call(this, {
                baseUrl: "https://tools.delegation.org.nz/sel-jenkins",
                name: name,
                resultContainer: resultContainer
            });
            $("a", this.resultElement)
                    .attr("href", "https://tools.delegation.org.nz/selenityui/testSummary.jsf?testUrl=" + encodeURI("https://tools.delegation.org.nz/sel-jenkins/job/" + encodeURI(name) + "/"));
        }

        SelenityJob.prototype = Object.create(Job.prototype);
        SelenityJob.prototype.constructor = SelenityJob;

        function BuildJob(name, resultContainer) {
            Job.call(this, {
                baseUrl: "https://tools.delegation.org.nz/jenkins",
                name: name,
                resultContainer: resultContainer
            });
        }

        BuildJob.prototype = Object.create(Job.prototype);
        BuildJob.prototype.constructor = BuildJob;

        function statusLoop(job) {
            job.status(function () {
              setTimeout(statusLoop, 30000, job);
            });
        }

        $("#results").text("");
        $.each(["Delegations Pocdev - Smoketest", "Delegations Pocdev - Regression", "Delegations POC - Smoketest", "Delegations POC - Regression"], function (index, val) {

            var job = new SelenityJob(val, "#results");
            statusLoop(job);

        });

        $("#deploy-results").text("");
        $.each(["Delegations POCDev Deploy", "Delegations POC Deploy"], function (index, val) {
            var job = new BuildJob(val, "#deploy-results");
            statusLoop(job);
        });

        $("#build-results").text("");
        $.each(["Delegations Build - Platform", "Delegations Build", "Delegations Build - OpenAM"], function (index, val) {

            var job = new BuildJob(val, "#build-results");
            statusLoop(job);

        });

        (function () {
            var startTime = new Date();
            var img = new Image();
            img.onload = function () {
                var endTime = new Date();
                var ping = endTime.getTime() - startTime.getTime();

                $("#ping").text("Ping: " + ping + "ms");

            };
            img.src = "/ui/assets/images/logo.png?" + startTime.getTime();
        })();

    });

</script>

</html>
